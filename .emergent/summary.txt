<analysis>
The AI engineer iteratively enhanced the KG Interiors finance application, primarily focusing on database setup, financial logic, and UX improvements. Initial challenges involved securing a PostgreSQL connection to AWS RDS and resolving SSL issues. Significant effort was dedicated to refining the overpayment workflow, including accurate calculation, UI modal implementation, and backend logic for credit note generation (initially immediate, then adjusted to occur post-admin approval). Key areas addressed included fixing  schema/UI, renaming  to  across the application, implementing dynamic milestone filtering, and debugging login and calculation errors. The work also involved extensive cleanup of SQL and documentation files, aiming for a streamlined codebase and clearer setup instructions. The immediate work involves finalizing this documentation cleanup.
</analysis>

<product_requirements>
KG Interiors requires a finance management platform to replace Excel, offering real-time cash flow, commissions, and project financial health. The platform needs to support various workflows (Sales, Design, Shopping, Civil Vendor) and include a Finance Dashboard, Project Ledger, Reports, and role-based access.

**Key implemented features include:**
*   Google OAuth for user authentication.
*   Customizable BizModel system with payment milestones and project stages.
*   Flexible payment overrides, Sales Order ID generation, Service Charge/Discount in estimations.
*   Project Ledger, Dashboard with charts, User/BizModel management UIs.

**Recent and ongoing work explicitly requested by the user and implemented:**
1.  **Customer KYC & GST:** Initial schema updates. GST calculation moved to estimator level (always applicable).
2.  **Document Management:** Upload Payment Receipts and Project Invoices, display all documents within project tabs (specifically for credit notes).
3.  **Payment Workflow Refinement:** Payments active after Finance uploads a receipt.
4.  **Milestone-based Payments:** Auto-calculate receivables based on BizModel milestones, cumulative logic considering woodwork/misc item percentages, and ad-hoc payments (renamed to ADHOC). Milestones filtered by project stage.
5.  **BizModel Versioning:** Automatic version upgrades, draft models not selectable, status toggle.  removed.
6.  **Overpayment Handling:** Detect overpayment on estimation revision, requires admin approval, generates reversal entries (credit notes in ), allows Finance to upload credit note document, reflects in ledger. Implemented with pre-save modal warning and scrollability. Approver names now shown.
</product_requirements>

<key_technical_concepts>
-   **Full-stack:** Next.js (React frontend, API routes backend), PostgreSQL (primary database).
-   **Authentication:** NextAuth.js with Google OAuth.
-   **Styling:** Tailwind CSS and Shadcn UI components.
-   **Database:** Direct SQL queries via  module, custom migrations.
-   **State Management:** React hooks (, ).
-   **File Management:** Backend API for document uploads.
-   **Infrastructure:** Supervisor (process management), Kubernetes (deployment).
-   **Security:** Handling SSL certificate issues for RDS connection.
</key_technical_concepts>

<code_architecture>
The application uses a Next.js full-stack framework with a PostgreSQL database.



-   ****: Centralized API handler.
    -   **Summary:** Manages CRUD operations and complex financial logic.
    -   **Changes:**
        -   Updated  fields;  fields (GST, overpayment status, credit note URL) were added, removed, and then re-added for the refined overpayment flow.
        -   Fixed  calculation logic.
        -   Implemented  and  endpoints.
        -   Re-implemented  and  endpoints for estimation revisions and credit note creation post-admin approval.
        -   Fixed  constraint issue (mode changed from 'adjustment' to 'other').
        -   Updated queries to include approver names for ledger and payments.
        -   Updated project creation to auto-select initial stage from BizModel and project PUT to reflect stage.
-   ****: Project estimation form.
    -   **Summary:** Allows creating/modifying estimations.
    -   **Changes:**
        -   Updated  and  for .
        -   Implemented pre-save overpayment check with a custom scrollable modal.
        -   Fixed  and  data passing from frontend to backend.
-   ****: Project detail page.
    -   **Summary:** Displays project info, estimations, ledger, and customer payments.
    -   **Changes:**
        -   Payment dialog refined, MISC renamed to ADHOC.
        -   Overpayment alert banner and Approve/Cancel buttons were removed and then restored to align with revised overpayment approval flow.
        -   Implemented a scrollable modal for cancel confirmation.
        -   Milestone payment selection filtered by current project stage.
        -   Added document upload for pending credit notes.
        -   Display of negative payment amounts in red.
        -   Ledger:  fixed to , inflow for credit notes changed to outflow, and approver names added.
-   ****: New project creation form.
    -   **Summary:** Allows creating new projects.
    -   **Changes:** Removed UI field for Initial phase; backend now automatically assigns the first stage from the selected BizModel.
-   ****: BizModel management UI.
    -   **Summary:** Manages BizModels.
    -   **Changes:** Removed  from UI. Changed placeholder onboarding to 2D.
-   ** (previously )**: Main database schema.
    -   **Summary:** Defines PostgreSQL schema.
    -   **Changes:**
        -   Removed  from .
        -   Renamed  to .
        -   Added .
        -   Added/restored  columns (, , ).
        -   Consolidated all schema changes into one file.
-   ****: Environment variables.
    -   **Summary:** Stores sensitive configurations like  and Google OAuth keys.
    -   **Changes:** Updated  for PostgreSQL connection, including various attempts to configure SSL and hostnames, and finally added  for local testing SSL bypass.
</code_architecture>

<pending_tasks>
-   Complete customer detail/edit page UI () to display and update KYC and bank details.
-   Implement UI for Finance team to upload Invoices for project-level revenue realization.
-   Display all uploaded documents (Payment receipts and Invoices) within the project tab's Documents section (beyond just receipts/credit notes).
-   Finalize the deletion of redundant  files (, ).
</pending_tasks>

<current_work>
Immediately before this summary request, the AI engineer was engaged in streamlining the project's documentation. Following a comprehensive analysis of the various  files present in the codebase, the user and AI engineer decided to consolidate and remove redundant documentation. The AI engineer previously deleted several outdated implementation notes and status tracking files, keeping only the essential setup, integration, and architecture documentation. The current task is to complete this cleanup by deleting two additional  files:  and . These files have been identified as redundant because their content has been integrated into the  and  files, respectively. The user explicitly requested to continue this deletion.
</current_work>

<optional_next_step>
Delete the redundant  and  files.
</optional_next_step>
